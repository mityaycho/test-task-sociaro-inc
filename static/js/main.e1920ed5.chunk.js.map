{"version":3,"sources":["components/App/App.module.css","components/Header/Header.module.css","redux/actions.ts","api/api.ts","api/apiFunc.ts","redux/weather-reducer.ts","redux/cities-reducer.ts","components/Header/Header.tsx","components/CheckedCity/CheckedCity.tsx","components/App/App.tsx","serviceWorker.ts","redux/store.ts","index.tsx","components/CheckedCity/CheckedCity.module.css"],"names":["module","exports","citiesReducerAC","findCities","type","instance","axios","create","baseURL","apiKey","api","cityName","get","initialState","getWeatherTC","city","dispatch","a","response","console","log","data","cities","name","country","Header","className","styles","header","day","CheckedCity","checkedCity","infoHead","infoDateTime","infoCityCountry","App","useState","citySelected","setCitySelected","useDispatch","useSelector","state","citiesState","getWeather","useCallback","e","getWeatherOne","currentTarget","value","AppContainer","onChange","options","onOptionSelected","onClick","list","map","el","sys","Boolean","window","location","hostname","match","reducers","combineReducers","weatherState","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1920ed5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3ttV0\",\"AppContainer\":\"App_AppContainer__gl4c3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__RrgT4\",\"day\":\"Header_day__1S0jH\",\"night\":\"Header_night__2-z6P\"};","export const GET_WEATHER = 'reducers/GET_WEATHER';\r\nexport const GET_CITIES = 'reducers/GET_CITIES';\r\n\r\ntype GetWeatherACType = {\r\n\ttype: typeof GET_WEATHER;\r\n};\r\nexport const getWeatherAC = (): GetWeatherACType => ({ type: GET_WEATHER });\r\n\r\ntype CitiesReducerACType = {\r\n\ttype: typeof GET_CITIES;\r\n\tfindCities: any\r\n};\r\nexport const citiesReducerAC = (findCities: any): CitiesReducerACType => ({ type: GET_CITIES, findCities })\r\n\r\nexport type ActionsType = GetWeatherACType;","import axios from 'axios';\r\n\r\nexport const instance = axios.create({ baseURL: 'https://api.openweathermap.org/data/2.5/' });\r\n\r\nexport const apiKey = '330216f9e3042b8a57a7865c3de67865';","import { instance, apiKey } from './api';\r\n\r\nexport const api = {\r\n\tgetWeather(cityName: string) {\r\n\t\t\treturn instance.get(`weather?q=${cityName}&units=metric&appid=${apiKey}`);\r\n\t},\r\n\tgetCities(cityName: string) {\r\n\t\treturn instance.get(`find?q=${cityName}&units=metric&appid=${apiKey}`);\r\n\t}\r\n};","import { GET_WEATHER, ActionsType } from \"./actions\";\r\nimport { api } from \"../api/apiFunc\";\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\n\r\nconst initialState = {};\r\n\r\nexport const weatherReducer = (state = initialState, action: ActionsType) => {\r\n\r\n\tswitch (action.type) {\r\n\t\tcase GET_WEATHER:\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t};\r\n};\r\n\r\nexport const getWeatherTC = (city: string) => async (dispatch: Dispatch) => {\r\n\ttry {\r\n\t\t\r\n\t\t\tconst response = await api.getWeather(city);\r\n\t\t\tconsole.log(response.data)\r\n\t\t\r\n\t} catch (error) {\r\n\t\treturn error;\r\n\t}\r\n};","import { api } from \"../api/apiFunc\";\r\nimport { Dispatch } from 'redux';\r\nimport { GET_CITIES, citiesReducerAC } from \"./actions\";\r\n\r\n\r\n\r\nconst initialState = {\r\n\tcities: [{\r\n\t\tname: 'Moscow',\r\n\t\tcountry: 'RU'\r\n\t}]\r\n};\r\n\r\nexport const citiesReducer = (state = initialState, action: any) => {\r\n\r\n\tswitch (action.type) {\r\n\t\tcase GET_CITIES:\r\n\t\t\treturn {\r\n\t\t\t\t...state, cities: [...action.findCities]\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t};\r\n};\r\n\r\nexport const getCitiesTC = (cityName: string) => async (dispatch: Dispatch) => {\r\n\ttry {\r\n\t\t\r\n\t\t\tconst response = await api.getCities(cityName);\r\n\t\t\tconsole.log(response.data.list.map((el: any) => ({name: el.name, country: el.sys.country})));\r\n\t\t\tconst findCities = response.data.list.map((el: any) => (el.name));\r\n\t\tdispatch(citiesReducerAC(findCities))\r\n\t} catch (error) {\r\n\t\treturn error;\r\n\t}\r\n};","import React from 'react';\r\nimport styles from './Header.module.css';\r\n\r\n\r\nfunction Header() {\r\n\r\n  return (\r\n    <div className={`${styles.header} ${styles.day}`}>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport styles from './CheckedCity.module.css';\r\n\r\n\r\nfunction CheckedCity() {\r\n\r\n  return (\r\n    <div className={styles.checkedCity}>\r\n\t\t\t<div className={styles.infoHead}>\r\n\t\t\t\t<span className={styles.infoDateTime}>Sunday, 19 May 2019 | 4:30PM</span>\r\n\t\t\t\t<span className={styles.infoCityCountry}>Mumbai, India</span>\r\n\t\t\t</div>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckedCity;","import React, { useState, useCallback } from 'react';\nimport styles from './App.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getWeatherTC } from '../../redux/weather-reducer';\nimport { Typeahead } from '@gforge/react-typeahead-ts';\nimport { getCitiesTC } from '../../redux/cities-reducer';\nimport Header from '../Header/Header';\nimport CheckedCity from '../CheckedCity/CheckedCity';\n\nfunction App() {\n\n\tconst [citySelected, setCitySelected] = useState('');\n\tconst dispatch = useDispatch();\n\tconst findCities = useSelector((state: any) => state.citiesState.cities)\n\n\tconst getWeather = useCallback((e: any) => {\n\t\tconsole.log(e)\n\t\tdispatch(getWeatherTC(e));\n\t\tsetCitySelected(e)\n\t}, [setCitySelected, dispatch]);\n\n\tconst getWeatherOne = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n\t\tdispatch(getWeatherTC(e.currentTarget.value));\n\t}, [dispatch]);\n\n  return (\n    <div className={styles.App}>\n      <section className={styles.AppContainer}>\n\t\t\t\t<Header />\n\t\t\t\t<CheckedCity />\n\t\t\t\t\n      </section>\n\t\t\t<input type=\"text\" onChange={getWeatherOne}/>\n\t\t\t\t<Typeahead options={findCities} value={citySelected} onOptionSelected={getWeather} />\n\t\t\t\t<button onClick={() => dispatch(getCitiesTC('moscow'))}>get cities</button>\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { weatherReducer } from './weather-reducer';\r\nimport { citiesReducer } from './cities-reducer';\r\n\r\n\r\nconst reducers = combineReducers({ \r\n\tweatherState: weatherReducer,\r\n\tcitiesState: citiesReducer\r\n });\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n};\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>;\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n\r\nexport const store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkedCity\":\"CheckedCity_checkedCity__ZgSJm\",\"infoHead\":\"CheckedCity_infoHead__2u-0x\",\"infoDateTime\":\"CheckedCity_infoDateTime__m9N66\",\"infoCityCountry\":\"CheckedCity_infoCityCountry__3IXnn\"};"],"sourceRoot":""}